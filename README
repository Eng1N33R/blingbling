Blingbling:
----------
Blingbling is a graphical widget library for Awesome Windows Manager. Based on oocairo (http://oocairo.naquadah.org/) it was first an attempt to rewrite the graph and progressbar widgets of Awesome WM. The goal of the Blingbling library is to provide more fancy, customisable and easy to setup graphical widgets, popups or signals for Awesome WM.

Originally, I have written Blingbling for myself but I share it under the GNU GPL-v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html). It meens that for this version, I know it works for me but that all. Testers and feddbacks are welcome!

Dependencies
------------
Blingbling require oocairo. The adress of the website of the project is : http://oocairo.naquadah.org.

Check you package manager to see if you can install an already packaged version of oocairo for your system.

For example on archlinux:
yaourt -S lua-oocairo-git

If you don't find an already packaged version of oocairo, you can install it from the source:

git clone git://git.naquadah.org/oocairo.git
cd oocairo*
and see the readme file for installation instructions.

Installation
------------
($XDG_CONFIG_HOME usually ~/.config)

cd $XDG_CONFIG_HOME/awesome/
git clone git@github.com:cedlemo/blingbling.git

Usage
-----------
in your rc.lua (at the top of the file or just before you use blingbling widgets or functions), add:
require("blingbling")

*Classical graph: classical_graph.lua
This widget drawn a common graph as the initial graph widget of Awesome but with more possibilities to customize it. (background transparency, displaying text on it). The stack graph is not implemented yet. It takes value in the range (0,1).
  -Create a graph and display it:
    --add this before adding the widget in the wibox

      mycairograph=blingbling.classical_graph.new()
      mycairograph:set_height(18)
      mycairograph:set_width(300)
      mycairograph:add_value(0.5)
    
    --add the widget in the wibox:

      my_top_wibox[s].widgets = {
            ......,
            mycairograph.widget,
            .....,
    --reload awesome

  -You can use vicious to feed the graph:
      mycairograph=blingbling.classical_graph.new()
      mycairograph:set_height(18)
      mycairograph:set_width(300)
      vicious.register(mycairograph, vicious.widgets.cpu, '$1', 2)
  
  -Customize the graph:
      mycairograph:set_width(integer)
      mycairograph:set_height(integer)      
      mycairograph:set_background_color(string) -->"#rrggbbaa"
        fill all the widget (width * height) with this color (default is transparent )
      mycairograph:set_v_margin(integer)
        define the top and bottom margin for the filed background and the graph
      mycairograph:set_h_margin(integer) 
        define the right and left margin for the filed background and the graph
      mycairograph:set_filled(boolean) --> true or false
        drawn a rectangle behind the graph default color is black
      mycairograph:set_filled_color(string) -->"#rrggbbaa"
      mycairograph:set_tiles(boolean) --> true or false
        drawn tiles behind the graph this is the default. Set false to not display them
      mycairograph:set_tiles_color(string) -->"#rrggbbaa"
      mycairograph:set_graph_color(string) -->"#rrggbbaa"
        set the color that fill the graph
      mycairograph:set_graph_line_color(string) -->"#rrggbbaa"
        set the color of the line of the graph
      mycairograph:set_show_text(boolean) --> true or false
        does the widget must display text on the graph
      mycairograph:set_text_color(string) -->"#rrggbbaa"
      mycairograph:set_background_text_color(string) -->"#rrggbbaa"
      mycairograph:set_font_size(integer)
      mycairograph:set_label(string)
        define what is the text to display. By default the text is : (value_send_to_the_widget *100) .. "%"
        static string: example set_label("CPU usage:") will display "CUP usage:" on the graph
        dynamic string: use $percent in the string example set_label("Load $percent %") will display "Load 10%" 

*Tiled graph
This widget is a graph like the Awesome graph widget but the values are represented with tiles. It takes value in the range (0,1)
  -Create a graph and display it:
    --add this before adding the widget in the wibox

      mytiledgraph=blingbling.classical_graph.new()
      mytiledgraph:set_height(18)
      mytiledgraph:set_width(300)
      mytiledgraph:add_value(0.5)
    
    --add the widget in the wibox:

      my_top_wibox[s].widgets = {
            ......,
            mytiledgraph.widget,
            .....,
    --reload awesome

  -You can use vicious to feed the graph:
      mytiledgraph=blingbling.classical_graph.new()
      mytiledgraph:set_height(18)
      mytiledgraph:set_width(300)
      vicious.register(mytiledgraph, vicious.widgets.cpu, '$1', 2)
  
  -Customize the graph:
      mytiledgraph:set_width(integer)
      mytiledgraph:set_height(integer)      
      mytiledgraph:set_background_color(string) -->"#rrggbbaa"
        fill all the widget (width * height) with this color (default is transparent )
      mytiledgraph:set_v_margin(integer)
        define the top and bottom margin for the filed background and the graph
      mytiledgraph:set_h_margin(integer) 
        define the right and left margin for the filed background and the graph
      mytiledgraph:set_background_tiles_color(string) -->"#rrggbbaa"
      mytiledgraph:set_tiles_graph_color(string) -->"#rrggbbaa"
        set the color that fill the graph
      mytiledgraph:set_hat_top_tile(boolean) --> true or false
        change the color of the last tile for each represented value. The new color is the complementary of the color of the tiles graph color
      mytiledgraph:set_show_text(boolean) --> true or false
        does the widget must display text on the graph
      mytiledgraph:set_text_color(string) -->"#rrggbbaa"
      mytiledgraph:set_background_text_color(string) -->"#rrggbbaa"
      mytiledgraph:set_font_size(integer)
      mytiledgraph:set_label(string)
        define what is the text to display. By default the text is : (value_send_to_the_widget *100) .. "%"
        static string: example set_label("CPU usage:") will display "CUP usage:" on the graph
        dynamic string: use $percent in the string example set_label("Load $percent %") will display "Load 10%" 

*Progress bar
This widget drawn a progress bar as the initial bar widget of Awesome but with more possibilities to customize it. (background transparency, displaying text on it). It takes value in the range (0,1).
  -Create a bar and display it:
    --add this before adding the widget in the wibox

      mycairoprogressbar=blingbling.classical_graph.new()
      mycairoprogressbar:set_height(18)
      mycairoprogressbar:set_width(300)
      mycairoprogressbar:add_value(0.5)
      mycairoprogressbar:set_horizontal(true)
    
    --add the widget in the wibox:

      my_top_wibox[s].widgets = {
            ......,
            mycairoprogressbar.widget,
            .....,
    --reload awesome

  -You can use vicious to feed the graph:
      mycairoprogressbar=blingbling.classical_graph.new()
      mycairoprogressbar:set_height(18)
      mycairoprogressbar:set_width(300)
      vicious.register(mycairoprogressbar, vicious.widgets.mem, '$1', 2)
  
  -Customize the graph:
      mycairoprogressbar:set_width(integer)
      mycairoprogressbar:set_height(integer)
      mycairogrogressbar:set_horizontal(boolean) --> true or false
        set the progress bar to increase/decrease horizontaly, from left to right
      mycairoprogressbar:set_background_color(string) -->"#rrggbbaa"
        fill all the widget (width * height) with this color (default is transparent )
      mycairoprogressbar:set_v_margin(integer)
        define the top and bottom margin for the filed background and the graph
      mycairoprogressbar:set_h_margin(integer) 
        define the right and left margin for the filed background and the graph
      mycairoprogressbar:set_filled(boolean) --> true or false
        drawn a rectangle behind the graph, default color is black
      mycairoprogressbar:set_filled_color(string) -->"#rrggbbaa"
      mycairoprogressbar:set_tiles(boolean) --> true or false
        drawn tiles behind the graph this is the default. Set false to not display them
      mycairoprogressbar:set_tiles_color(string) -->"#rrggbbaa"
      mycairoprogressbar:set_graph_color(string) -->"#rrggbbaa"
        set the color that fill the graph
      mycairoprogressbar:set_graph_line_color(string) -->"#rrggbbaa"
        set the color of the line of the graph
      mycairoprogressbar:set_show_text(boolean) --> true or false
        does the widget must display text on the graph
      mycairoprogressbar:set_text_color(string) -->"#rrggbbaa"
      mycairoprogressbar:set_background_text_color(string) -->"#rrggbbaa"
      mycairoprogressbar:set_font_size(integer)
      mycairoprogressbar:set_label(string)
        define what is the text to display. By default the text is : (value_send_to_the_widget *100) .. "%"
        static string: example set_label("CPU usage:") will display "CUP usage:" on the graph
        dynamic string: use $percent in the string example set_label("Load $percent %") will display "Load 10%" 

*Volume widget
This graphical widget represent a value between 0 and 1 with a triangle or with bars. Lot of parameters can be customized and there are functions to get data from master or set commands for managing the sound.
  -Create the volume widget and display it:
    
    --add this before adding the widget in the wibox
      
      myvolume:blingbling.volume.new()
      myvolume:set_height(18)
      myvolume:set_width(30)
    
    --add the widget in the wibox:
      my_top_wibox[s].widgets = {
             ......,
             myvolume.widget,
            .....,
     --reload awesome
  
  -You can use vicious to feed the graph or create a timer that feeds it using myvolume:add_value( a_value) or you can use one of the method that get the sound value from:
  amixer
    myvolume:update_master()
  mpc
    myvolume:update_mpd()

  -You can link to the widget some commands to manage the sound:
    myvolume:set_master_control()
      a left clic toggle mute/unmute
      wheel up increase the volume 
      wheel down decrease the volume
  
  -Customize the graph:
      myvolume:set_width(integer)
      myvolume:set_height(integer)
      myvolume:set_background_color(string) -->"#rrggbbaa"
        fill all the widget (width * height) with this color (default is transparent )
      myvolume:set_v_margin(integer)
        define the top and bottom margin for the filed background and the graph
      myvolume:set_h_margin(integer) 
        define the right and left margin for the filed background and the graph
      myvolume:set_background_graph_color(string) -->"#rrggbbaa"
      myvolume:set_graph_color(string) -->"#rrggbbaa"
        set the color that fill the graph
      myvolume:set_show_text(boolean) --> true or false
        does the widget must display text on the graph
      myvolume:set_text_color(string) -->"#rrggbbaa"
      myvolume:set_background_text_color(string) -->"#rrggbbaa"
      myvolume:set_font_size(integer)
      myvolume:set_label(string)
        define what is the text to display. By default the text is : (value_send_to_the_widget *100) .. "%"
        static string: example set_label("Volume:") will display "Volume:" on the graph
        dynamic string: use $percent in the string example set_label("Volume: $percent %") will display "Volume: 10%" .

*MPD widget
The most useless widget, but my favorite. This widget reads from the fifo of a local mpd server and display the raw data as a graph which evolves with the music played. There is method a to bind on it mpd commands ( play/stop, next/prev song, increase/decrease volume ) and displaying state and current song informations.

  -Create the mpd widget and display it:
    
    --add this before adding the widget in the wibox
      
      mympd:blingbling.mpd.new()
      mympd:set_height(18)
      mympd:set_width(200)
      mympd:update() 

    --add the widget in the wibox:
      my_top_wibox[s].widgets = {
             ......,
             mympd.widget,
            .....,
     --reload awesome
  
  -Here, the only way to feed the graph is to use:
  
    mympd:update()
  
  -You can link to the widget some commands to manage mpd:
    mympd:set_mpc_commands()
      a left clic toggle stop/start
      wheel up increase the mpd volume
      wheel down decrease the mpd volume
      ctrl + wheel up to play the next song
      ctrl + wheel down to play the prev
  
  -Customize the graph:
      mympd:set_width(integer)
      mympd:set_height(integer)
      mympd:set_background_color(string) -->"#rrggbbaa"
        fill all the widget (width * height) with this color (default is transparent )
      mympd:set_v_margin(integer)
        define the top and bottom margin for the filed background and the graph
      mympd:set_h_margin(integer) 
        define the right and left margin for the filed background and the graph
      mympd:set_graph_color(string) -->"#rrggbbaa"
      mympd:set_line(boolean) --> true or false
        by default the graph is make with little squarre, if true the graph is a line
      mympd:set_mpd_pass(string)
        define mpd password
      mympd:set_mpd_host(string)
        define the host name where is the mpd server (127.0.0.1 by default)
      mympd:set_mpd_port(integer)
        define the mpd port to connect to (6600 by default)
      mympd:set_error_background_color(string) -->"#rrggbbaa"
        define the color of the background when error messages are displayed
      mympd:set_error_text_color
        define the color of the text when error messages are displayed
      mympd:set_show_text(boolean) --> true or false
        does the widget must display text on the graph
      mympd:set_text_color(string) -->"#rrggbbaa"
      mympd:set_background_text_color(string) -->"#rrggbbaa"
      mympd:set_font_size(integer)
      mympd:set_label(string)
        define what is the text to display. By default the text is : (artist > song > album)
        static string: example set_label("MPD:") will display "MPD:" on the graph
        dynamic string: use $artist, $title, $album in the string example set_label("$artist>$song") will display "Megadeth>Tornado of souls"" 

*net widget

*top popup
The top popup is a popup created with naugthy that displays a top formated and colorized output. You can bind it to a widget (textbox or image or graph from blingbling). It adds a button fonctionnality to the widget, left click launch htop in a terminal. Furthermore wheel down/up refresh the popup with less or more lines.
  -Usage:
    
    (with mycairograph -> a blingbling classical graph widget)
    
    blingbling.popups.htop(mycairograph,{ title_color = "#rrggbbaa", user_color= "#rrggbbaa", root_color="#rrggbbaa", terminal = "urxvt"})
      
    mandatory arguments:
    title_color define the color of the title's columns.
    user_color display the name of the current user with this color in the top output.
    root_color display the root name with this color in the top output

    optional arguments:
    terminal let you define the terminal used to launch htop. By default it's xterm
*netstat popup
The  netstat popup is a popup created with naugthy that displays a netstat formated and colorized output. You can bind it to a widget (textbox or image or graph from blingbling).
  -Usage:
    
    (with net -> a textbox widget)
    
    blingbling.popups.htop(mycairograph.widget,{ title_color = "#rrggbbaa", user_color= "#rrggbbaa", root_color="#rrggbbaa", terminal = "urxvt"})
      
    mandatory arguments:
    widget (if blinbling widget add .widget ex: cpu.widget, if textbox or imagebox just put the widget name)
    title_color define the color of the title's columns.
    user_color display the name of the current user with this color in the top output.
    root_color display the root name with this color in the top output

    optional arguments:
    terminal let you define the terminal used to launch htop. By default it's xterm


Author
-------

cedlemo cedlemo at gmx dot com
